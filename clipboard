struct header
{
/* 0x0000 */ c8<4> ident;
/* 0x0004 */ u32<1> checksum;
/* 0x0008 */ c8<80> comment; 
/* 0x0058 */ u32<1> entry_count;
/* 0x005c */ u32<1> audit_count;
/* 0x0060 */ u32<1> revision;
/* 0x0064 */ u32<1> priority;
/* 0x0068 */ c8<80> author;
/* 0x00B8 */ c8<80> copyright;
/* 0x0108 */ u32<1> entry_offset;
/* 0x010c */ u32<1> entry_crc;
/* 0x0110 */ u32<1> names_size;
/* 0x0114 */ u32<1> depends_count;
/* 0x0118 */ u32<1> depends_crc;
/* 0x011c */ u32<1> audits_crc;
constexpr inline u32<1> checksum_offset(          ) { return sizeof(checksum) + sizeof(ident); }
constexpr inline u32<1>  entries_offset(          ) { return entry_offset; }
constexpr inline u32<1>    names_offset(          ) { return entry_offset + entry_count * sizeof(struct entry); }
constexpr inline u32<1>  depends_offset(          ) { return names_size + names_offset(); }
constexpr inline u32<1>   audits_offset(          ) { return depends_offset() + depends_count * sizeof(struct depend::entry); }
constexpr inline  b8<1> checksum_verify(u8<1>* buf) { return    checksum == crc32::mpeg2::compute(&buf[checksum_offset()], sizeof(struct header) - sizeof(checksum) - sizeof(ident)); } 
constexpr inline  b8<1>  entries_verify(u8<1>* buf) { return   entry_crc == crc32::mpeg2::compute(&buf[ entries_offset()],   entry_count * sizeof(struct entry)); }
constexpr inline  b8<1>  depends_verify(u8<1>* buf) { return depends_crc == crc32::mpeg2::compute(&buf[ depends_offset()], depends_count * sizeof(struct depend::entry)); }
constexpr inline  b8<1>   audits_verify(u8<1>* buf) { return  audits_crc == crc32::mpeg2::compute(&buf[  audits_offset()],  audits_count * sizeof(struct  audit::entry)); }
};
